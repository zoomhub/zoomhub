name: zoomhub

on: push
# on:
#   push:
#     branches: [master]
#   pull_request:
#     branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PGHOST: "localhost"
      PGPORT: "5432"
      PGUSER: "zoomhub"
      PGDATABASE: "zoomhub_test"
      PGPASSWORD: "popcorn"

    services:
      postgres:
        image: postgres:9.6.5
        env:
          POSTGRES_USER: zoomhub
          POSTGRES_DB: zoomhub_test
          POSTGRES_PASSWORD: popcorn
        # Set health checks to wait until PostgreSQL has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - uses: haskell/actions/setup@v1
        with:
          ghc-version: "8.6.5"
          cabal-version: "latest"
          enable-stack: true
          stack-version: "latest"

      - name: Cache ~/.stack
        uses: actions/cache@v1
        env:
          cache-name: cache-stack
        with:
          path: ~/.stack
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/stack.yaml') }}-${{ hashFiles('**/stack.yaml.lock') }}-${{ hashFiles('**/package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache .stack-work
        uses: actions/cache@v1
        env:
          cache-name: cache-stack-work
        with:
          path: .stack-work
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/stack.yaml') }}-${{ hashFiles('**/stack.yaml.lock') }}-${{ hashFiles('**/package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Build
        run: |
          stack build \
            --test \
            --no-run-tests \
            --no-terminal \
            --jobs 4 \
            --pedantic \
            --ghc-options='-O2'

      - name: Run tests
        run: |
          HASHIDS_SALT='secret-salt' \
            stack build \
              --test \
              --no-run-tests \
              --no-terminal \
              --jobs 4 \
              --pedantic \
              --ghc-options='-O2' \
              --exec "migrate-database $PGDATABASE migrate"

          psql $PGDATABASE < data/zoomhub_data.sql
          psql $PGDATABASE < data/zoomhub_sequences.sql

          stack build \
            --test \
            --no-terminal \
            --pedantic \
            --ghc-options='-O2'

      - name: Create workspace directory
        run: mkdir workspace

      - name: Copy AWS ops files to workspace
        run: |
          cp --recursive --preserve \
            ops/aws/.ebextensions \
            ops/aws/.platform \
            ops/aws/build-web.sh \
            ops/aws/deploy-web.sh \
            ops/aws/Dockerfile.deploy \
            ops/aws/Dockerrun.aws.json.template \
            ops/aws/run.sh \
            workspace

      - name: Copy public files to workspace
        run: cp --recursive public workspace

      - name: Copy zoomhub app binary to workspace
        run: cp "$(find .stack-work/dist -type f -name zoomhub | tr -d '\n')" workspace

      - name: Copy database migration binary to workspace
        run: cp "$(find .stack-work/dist -type f -name migrate-database)" workspace

      - name: Upload workspace
        uses: actions/upload-artifact@v2
        with:
          name: workspace
          path: |
            workspace
            # deployment
            .ebextensions
            .platform
            run.sh
            deploy-web.sh
            Dockerfile.deploy
            Dockerrun.aws.json.template
            # migration
            migrate-database
            # app
            public
            zoomhub

  deploy:
    runs-on: ubuntu-latest
    needs: build
    # if: github.ref == 'refs/heads/master'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ZH_AWS_ACCOUNT_ID: ${{ secrets.ZH_AWS_ACCOUNT_ID }}
      ZH_AWS_EB_ENVIRONMENT: production
      ZH_AWS_EB_PROJECT: ${{ secrets.ZH_AWS_EB_PROJECT }}
      ZH_AWS_ECR_REPO: ${{ secrets.ZH_AWS_ECR_REPO }}
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v2
        with:
          name: workspace

      - name: Create version
        run: echo $GITHUB_SHA > workspace/version.txt

      - name: Build Docker image
        run: cd workspace && bash build-web.sh $GITHUB_SHA

      - name: Deploy 'web' Docker image to AWS Elastic Beanstalk
        run: cd workspace && bash deploy-web.sh $GITHUB_SHA
