name: zoomhub

on: push
# on:
#   push:
#     branches: [master]
#   pull_request:
#     branches: [master]

jobs:
  web-build:
    runs-on: ubuntu-18.04
    env:
      PGHOST: "localhost"
      PGPORT: "5432"
      PGUSER: "zoomhub"
      PGDATABASE: "zoomhub_test"
      PGPASSWORD: "popcorn"

    services:
      postgres:
        image: postgres:9.6.5
        env:
          POSTGRES_USER: zoomhub
          POSTGRES_DB: zoomhub_test
          POSTGRES_PASSWORD: popcorn
        # Set health checks to wait until PostgreSQL has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps TCP port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - uses: haskell/actions/setup@v1
        with:
          ghc-version: "8.6.5"
          cabal-version: "latest"
          enable-stack: true
          stack-version: "latest"

      - name: Cache ~/.stack
        uses: actions/cache@v2
        env:
          cache-name: cache-stack
        with:
          path: ~/.stack
          key: web-build-v1-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/stack.yaml') }}-${{ hashFiles('**/stack.yaml.lock') }}-${{ hashFiles('**/package.yaml') }}
          restore-keys: |
            web-build-v1-${{ runner.os }}-${{ env.cache-name }}-
            web-build-v1-${{ runner.os }}-

      - name: Cache .stack-work
        uses: actions/cache@v2
        env:
          cache-name: cache-stack-work
        with:
          path: .stack-work
          key: web-build-v1-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/stack.yaml') }}-${{ hashFiles('**/stack.yaml.lock') }}-${{ hashFiles('**/package.yaml') }}
          restore-keys: |
            web-build-v1-${{ runner.os }}-${{ env.cache-name }}-
            web-build-v1-${{ runner.os }}-

      - name: Cache binaries
        id: cache-stack-binaries
        uses: actions/cache@v2
        env:
          cache-name: cache-stack-binaries-v3
        with:
          path: |
            bin/zoomhub
            bin/migrate-database
          key: web-build-v1-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/stack.yaml') }}-${{ hashFiles('**/stack.yaml.lock') }}-${{ hashFiles('**/package.yaml') }}-${{ hashFiles('data/*') }}
          restore-keys: |
            web-build-v1-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/stack.yaml') }}-${{ hashFiles('**/stack.yaml.lock') }}-${{ hashFiles('**/package.yaml') }}-${{ hashFiles('data/*') }}

      - name: Build
        if: steps.cache-stack-binaries.outputs.cache-hit != 'true'
        run: |
          mkdir bin
          stack build \
            --copy-bins \
            --test \
            --no-run-tests \
            --no-terminal \
            --jobs 4 \
            --pedantic \
            --ghc-options='-O2' \
            --local-bin-path bin

      - name: Run tests
        if: steps.cache-stack-binaries.outputs.cache-hit != 'true'
        run: |
          HASHIDS_SALT='secret-salt' ./bin/migrate-database $PGDATABASE migrate

          psql $PGDATABASE < data/zoomhub_data.sql
          psql $PGDATABASE < data/zoomhub_sequences.sql

          stack build \
            --test \
            --no-terminal \
            --pedantic \
            --ghc-options='-O2'

      - name: Create workspace directory
        run: mkdir workspace

      - name: Copy AWS ops files to workspace
        run: |
          cp --recursive --preserve \
            ops/aws/.ebextensions \
            ops/aws/.platform \
            ops/aws/build-web.sh \
            ops/aws/deploy-web.sh \
            ops/aws/Dockerfile.deploy \
            ops/aws/Dockerrun.aws.json.template \
            ops/aws/run.sh \
            workspace

      - name: Copy public files to workspace
        run: cp --recursive public workspace

      - name: Copy binaries workspace
        run: cp bin/* workspace

      - name: "WORKAROUND: Create tar archive (preserves file permissions on GitHub Actions)"
        # See: https://github.com/actions/upload-artifact/tree/11e311c8b504ea40cbed20583a64d75b4735cff3#permission-loss
        run: tar --create --verbose --gzip --file web-workspace.tar.gz workspace

      - name: Upload workspace
        uses: actions/upload-artifact@v2
        with:
          name: web-workspace
          path: web-workspace.tar.gz

  process-content-build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Cache process-content Node.js dependencies
        uses: actions/cache@v2
        env:
          cache-name: process-content-node-dependencies
        with:
          path: process-content/.npm
          key: process-content-build-v1-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('process-content/package-lock.json') }}
          restore-keys: |
            process-content-build-v1-${{ runner.os }}-${{ env.cache-name }}-
            process-content-build-v1-${{ runner.os }}-

      - name: Install Node.js dependencies
        run: cd process-content && npm ci --cache .npm --prefer-offline

      - name: Create workspace directory
        run: mkdir workspace

      - name: Create AWS Lambda package
        run: cd process-content && zip -r function-processContent.zip index.js lib node_modules

      - name: Move AWS Lambda package to workspace
        run: mv process-content/function-processContent.zip workspace

      - name: Copy AWS ops files to workspace
        run: cp ops/aws/deploy-processContent.sh workspace

      - name: "WORKAROUND: Create tar archive (preserves file permissions on GitHub Actions)"
        # See: https://github.com/actions/upload-artifact/tree/11e311c8b504ea40cbed20583a64d75b4735cff3#permission-loss
        run: tar --create --verbose --gzip --file process-content-workspace.tar.gz workspace

      - name: Upload workspace
        uses: actions/upload-artifact@v2
        with:
          name: process-content-workspace
          path: process-content-workspace.tar.gz

  deploy:
    runs-on: ubuntu-18.04
    needs: [process-content-build, web-build]
    if: github.ref == 'refs/heads/master'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ZH_AWS_ACCOUNT_ID: ${{ secrets.ZH_AWS_ACCOUNT_ID }}
      ZH_AWS_EB_ENVIRONMENT: production
      ZH_AWS_EB_PROJECT: ${{ secrets.ZH_AWS_EB_PROJECT }}
      ZH_AWS_ECR_REPO: ${{ secrets.ZH_AWS_ECR_REPO }}
    steps:
      - name: Download process-content-workspace
        uses: actions/download-artifact@v2
        with:
          name: process-content-workspace

      - name: Download web-workspace
        uses: actions/download-artifact@v2
        with:
          name: web-workspace

      - name: "WORKAROUND: Extract tar archive (preserves file permissions on GitHub Actions)"
        # See: https://github.com/actions/upload-artifact/tree/11e311c8b504ea40cbed20583a64d75b4735cff3#permission-loss
        run: |
          tar --extract --verbose --gzip --file process-content-workspace.tar.gz --strip-components=1
          tar --extract --verbose --gzip --file web-workspace.tar.gz --strip-components=1

      - name: "DEBUG: List files"
        run: ls -laR .

      - name: Create version
        shell: bash
        run: echo $GITHUB_SHA > version.txt

      - name: Build Docker image
        shell: bash
        run: ./build-web.sh $GITHUB_SHA

      - name: Deploy 'web' Docker image to AWS Elastic Beanstalk
        shell: bash
        run: ./deploy-web.sh $GITHUB_SHA

      - name: Deploy 'processContent' to AWS Lambda
        shell: bash
        run: ./deploy-processContent.sh
